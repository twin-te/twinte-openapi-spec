openapi: 3.0.3
info:
  title: Twinte API
  description: Twinte API Gateway
  version: 2.0.0
servers:
  - url: http://localhost:3000/v2
    description: localhost
  - url: https://api.dev.twinte.net/v2
    description: dev server
  - url: https://api.twinte.net/v2
    description: production server


paths:
  /school-calendar/events:
    get:
      summary: 学年暦のイベントを取得する
      tags: 
        - 学年暦
      parameters:
        - name: year
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchoolCalendarEvent"
        400:
          description: 失敗
  
  /school-calendar/modules:
    get:
      summary: 学年暦のモジュール期間を取得する
      tags: 
        - 学年暦
      parameters:
        - name: year
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchoolCalendarModule"
        400:
          description: 失敗

  /courses/search:
    post:
      summary: 講義を検索する
      tags:
        - 講義
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
  
  /courses/{year}/{code}:
    get:
      summary: 指定した講義を取得する
      tags:
        - 講義
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"

  /registered-courses:
    get:
      summary: 登録済みの講義を返す
      tags:
        - 登録された講義
      parameters:
        - name: year
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RegisteredCourse"
    
    post:
      summary: 講義を登録する
      tags:
        - 登録された講義
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    year:
                      type: integer
                    code:
                      type: string
                - $ref: "#/components/schemas/RegisteredCourseWithoutID"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisteredCourse" 
  
  /registered-courses/{id}:
    get:
      summary: 指定した登録された講義を取得する
      tags:
        - 登録された講義
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisteredCourse"
    
    put:
      summary: 指定した登録された講義を更新する
      tags:
        - 登録された講義
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisteredCourseWithoutID"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisteredCourse"
    
    delete:
      summary: 指定した登録された講義を削除する
      tags:
        - 登録された講義
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: 成功
      
  /tags:
    get:
      summary: 全てのタグを取得する
      tags: 
        - タグ
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
    
    post:
      summary: タグを作成する
      tags:
        - タグ
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
  
  /tags/{id}:
    put:
      summary: タグを更新する
      tags: 
        - タグ
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
    
    delete:
      summary: タグを削除する
      tags:
        - タグ
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: 成功

  /users/me:
    get:
      summary: ログイン中のユーザーを取得する
      tags:
        - ユーザー
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/User"


tags:
  - name: 学年暦
  - name: 講義
  - name: 登録された講義
  - name: タグ
  - name: ユーザー


components:
  schemas:
    CourseMethods:
      type: array
      items:
        type: string
        enum:
          - 対面
          - オンライン
          - オンデマンド
          - 不明
    
    CourseModule:
      type: string
      enum:
        - 春A
        - 春B
        - 春C
        - 夏季休業中
        - 秋A
        - 秋B
        - 秋C
        - 春季休業中
        - 通年
        - 不明

    CourseSchedule:
      type: object
      required:
        - module
        - day
        - period
        - room
      properties:
        module:
          $ref: "#/components/schemas/CourseModule"
        day:
          $ref: "#/components/schemas/Day"
        period:
          type: integer
        room:
          type: string

    Day:
      type: string
      enum:
        - 日
        - 月
        - 火
        - 水
        - 木
        - 金
        - 土

    SchoolCalendarEvent:
      type: object
      required:
        - date
        - eventType
        - description
      properties:
        date:
          type: string
          format: date
        eventType:
          type: "string"
          enum:
            - 祝日
            - 休日
            - 試験
            - 振替
        description:
          type: string
        changeTo:
          $ref: "#/components/schemas/Day"

    SchoolCalendarModule:
      type: object
      required:
        - year
        - module
        - start
        - end
      properties:
        year:
          type: integer
          description: 年度
        module:
          type: string
          enum:
            - 春A
            - 春B
            - 春C
            - 夏季休業中
            - 秋A
            - 秋B
            - 秋C
            - 春季休業中
        start:
          type: string
          format: date
        end:
          type: string
          format: date

    Course:
      type: object
      required:
        - courseID
        - year
        - code
        - name
        - instructor
        - credit
        - overview
        - remarks
        - recommendedGrades
        - methods
        - schedules
      properties:
        courseID:
          type: string
          format: uuid
        year:
          type: integer
        code:
          type: string
        name:
          type: string
        instructor:
          type: string
        credit:
          type: number
        overview:
          type: string
        remarks:
          type: string
        recommendedGrades:
          type: array
          items:
            type: integer
        methods:
          $ref: "#/components/schemas/CourseMethods"
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/CourseSchedule"
    
    RegisteredCourse:
      allOf:
        - type: object
          required:
            - registeredCourseID
            - userID
          properties:
            registeredCourseID:
              type: string
              format: uuid
            userID:
              type: string
              format: uuid
            course:
              $ref: "#/components/schemas/Course"
        - $ref: "#/components/schemas/RegisteredCourseWithoutID"
    
    RegisteredCourseWithoutID:
      type: object
      properties:
        year:
          type: integer
        name:
          type: string
        instructor:
          type: string
        credit:
          type: number
        methods:
          $ref: "#/components/schemas/CourseMethods"
        schedules:
          type: array
          items:
            $ref: "#/components/schemas/CourseSchedule"
        memo:
          type: string
        attendance:
          type: integer
        absence:
          type: integer
        late: 
          type: integer
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"

    Tag:
      type: object
      required:
        - tagID
        - userID
        - name
      properties:
        tagID:
          type: string
          format: uuid
        userID:
          type: string
          format: uuid
        name:
          type: string
    
    User:
      type: object
      required:
        - userID
        - name
      properties:
        userID:
          type: string
          format: uuid
        name:
          type: string
